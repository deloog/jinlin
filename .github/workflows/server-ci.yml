name: Server CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/**'
      - '.github/workflows/server-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server/**'
      - '.github/workflows/server-ci.yml'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./server
        
      - name: Run ESLint
        run: npm run lint
        working-directory: ./server
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: reminder_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./server
        
      - name: Create .env.test file
        run: |
          cat > .env.test << EOL
          NODE_ENV=test
          PORT=3001
          DB_HOST=localhost
          DB_PORT=3306
          DB_USER=root
          DB_PASSWORD=password
          DB_NAME=reminder_test
          JWT_SECRET=test_jwt_secret
          JWT_EXPIRES_IN=1h
          REFRESH_TOKEN_SECRET=test_refresh_token_secret
          REFRESH_TOKEN_EXPIRES_IN=7d
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_PASSWORD=
          REDIS_DB=1
          LOG_LEVEL=error
          BACKUP_DIR=./backups
          EOL
        working-directory: ./server
        
      - name: Run database migrations
        run: npm run init-db
        working-directory: ./server
        env:
          NODE_ENV: test
          
      - name: Run unit tests
        run: npm run test:unit
        working-directory: ./server
        
      - name: Run integration tests
        run: npm run test:integration
        working-directory: ./server
        
      - name: Generate coverage report
        run: npm run test:coverage
        working-directory: ./server
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: server/coverage
  
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: reminder_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./server
        
      - name: Create .env.test file
        run: |
          cat > .env.test << EOL
          NODE_ENV=test
          PORT=3001
          DB_HOST=localhost
          DB_PORT=3306
          DB_USER=root
          DB_PASSWORD=password
          DB_NAME=reminder_test
          JWT_SECRET=test_jwt_secret
          JWT_EXPIRES_IN=1h
          REFRESH_TOKEN_SECRET=test_refresh_token_secret
          REFRESH_TOKEN_EXPIRES_IN=7d
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_PASSWORD=
          REDIS_DB=1
          LOG_LEVEL=error
          BACKUP_DIR=./backups
          EOL
        working-directory: ./server
        
      - name: Run database migrations
        run: npm run init-db
        working-directory: ./server
        env:
          NODE_ENV: test
          
      - name: Run end-to-end tests
        run: npm run test:e2e
        working-directory: ./server
  
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: reminder_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./server
        
      - name: Create .env.test file
        run: |
          cat > .env.test << EOL
          NODE_ENV=test
          PORT=3001
          DB_HOST=localhost
          DB_PORT=3306
          DB_USER=root
          DB_PASSWORD=password
          DB_NAME=reminder_test
          JWT_SECRET=test_jwt_secret
          JWT_EXPIRES_IN=1h
          REFRESH_TOKEN_SECRET=test_refresh_token_secret
          REFRESH_TOKEN_EXPIRES_IN=7d
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_PASSWORD=
          REDIS_DB=1
          LOG_LEVEL=error
          BACKUP_DIR=./backups
          EOL
        working-directory: ./server
        
      - name: Run database migrations
        run: npm run init-db
        working-directory: ./server
        env:
          NODE_ENV: test
          
      - name: Start server
        run: npm run start:test &
        working-directory: ./server
        
      - name: Wait for server to start
        run: sleep 10
        
      - name: Run performance tests
        run: npm run test:performance -- --scenario=health
        working-directory: ./server
        
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: server/tests/performance/results
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install dependencies
        run: npm ci --production
        working-directory: ./server
        
      - name: Create build artifact
        run: |
          mkdir -p build
          cp -r server build/
          rm -rf build/server/node_modules
          rm -rf build/server/tests
          rm -rf build/server/coverage
          rm -rf build/server/.env*
          rm -rf build/server/backups
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: build
